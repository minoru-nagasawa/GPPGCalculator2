// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  RAMANUJAN
// DateTime: 2019/01/14 18:33:11
// UserName: Hardy
// Input file <Calculator.Language.grammar.y - 2019/01/14 18:09:19>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GPPGCalculator2
{
internal enum Token {error=63,EOF=64,VARIABLE=65,CONSTANT=66};

internal partial struct ValueType
{ 
    public double real;
    public string text;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class CalculatorParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[14];
  private static State[] states = new State[23];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "assignment", "additive", "multiplicative", "primary", 
      };

  static CalculatorParser() {
    states[0] = new State(new int[]{65,20,66,10,40,11},new int[]{-1,1,-3,3,-4,4,-5,19,-6,18});
    states[1] = new State(new int[]{64,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{43,5,45,14,64,-3});
    states[5] = new State(new int[]{65,9,66,10,40,11},new int[]{-5,6,-6,18});
    states[6] = new State(new int[]{42,7,47,16,43,-6,45,-6,64,-6,41,-6});
    states[7] = new State(new int[]{65,9,66,10,40,11},new int[]{-6,8});
    states[8] = new State(-9);
    states[9] = new State(-11);
    states[10] = new State(-12);
    states[11] = new State(new int[]{65,9,66,10,40,11},new int[]{-4,12,-5,19,-6,18});
    states[12] = new State(new int[]{41,13,43,5,45,14});
    states[13] = new State(-13);
    states[14] = new State(new int[]{65,9,66,10,40,11},new int[]{-5,15,-6,18});
    states[15] = new State(new int[]{42,7,47,16,43,-7,45,-7,64,-7,41,-7});
    states[16] = new State(new int[]{65,9,66,10,40,11},new int[]{-6,17});
    states[17] = new State(-10);
    states[18] = new State(-8);
    states[19] = new State(new int[]{42,7,47,16,43,-5,45,-5,64,-5,41,-5});
    states[20] = new State(new int[]{61,21,42,-11,47,-11,43,-11,45,-11,64,-11});
    states[21] = new State(new int[]{65,20,66,10,40,11},new int[]{-3,22,-4,4,-5,19,-6,18});
    states[22] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,64});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{65,61,-3});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-4,43,-5});
    rules[7] = new Rule(-4, new int[]{-4,45,-5});
    rules[8] = new Rule(-5, new int[]{-6});
    rules[9] = new Rule(-5, new int[]{-5,42,-6});
    rules[10] = new Rule(-5, new int[]{-5,47,-6});
    rules[11] = new Rule(-6, new int[]{65});
    rules[12] = new Rule(-6, new int[]{66});
    rules[13] = new Rule(-6, new int[]{40,-4,41});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> assignment
{ m_result = ValueStack[ValueStack.Depth-1].real; }
        break;
      case 3: // assignment -> additive
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-1].real; }
        break;
      case 4: // assignment -> VARIABLE, '=', assignment
{
                                                    m_variables[ValueStack[ValueStack.Depth-3].text] = ValueStack[ValueStack.Depth-1].real;
                                                    CurrentSemanticValue.real = ValueStack[ValueStack.Depth-1].real;
                                                }
        break;
      case 5: // additive -> multiplicative
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-1].real;           }
        break;
      case 6: // additive -> additive, '+', multiplicative
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-3].real + ValueStack[ValueStack.Depth-1].real; }
        break;
      case 7: // additive -> additive, '-', multiplicative
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-3].real - ValueStack[ValueStack.Depth-1].real; }
        break;
      case 8: // multiplicative -> primary
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-1].real;            }
        break;
      case 9: // multiplicative -> multiplicative, '*', primary
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-3].real * ValueStack[ValueStack.Depth-1].real;  }
        break;
      case 10: // multiplicative -> multiplicative, '/', primary
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-3].real / ValueStack[ValueStack.Depth-1].real;  }
        break;
      case 11: // primary -> VARIABLE
{
                                                    double v;
                                                    if (m_variables.TryGetValue(ValueStack[ValueStack.Depth-1].text, out v))
                                                    {
                                                        CurrentSemanticValue.real = v;
                                                    }
                                                    else
                                                    {
                                                        CurrentSemanticValue.real = 0;
                                                    }
                                                }
        break;
      case 12: // primary -> CONSTANT
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-1].real; }
        break;
      case 13: // primary -> '(', additive, ')'
{ CurrentSemanticValue.real = ValueStack[ValueStack.Depth-2].real; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

// ---------------------------
// ?R?[?h??
// ---------------------------
}
}
